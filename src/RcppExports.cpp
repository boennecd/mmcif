// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mmcif_data_holder_to_R
SEXP mmcif_data_holder_to_R(NumericMatrix const covs_trajectoryn, NumericMatrix const d_covs_trajectoryn, NumericMatrix const covs_risk, IntegerVector const has_finite_trajectory_prob, IntegerVector const cause, size_t const n_causes, Rcpp::IntegerMatrix pair_indices, IntegerVector const singletons_in);
RcppExport SEXP _mmcif_mmcif_data_holder_to_R(SEXP covs_trajectorynSEXP, SEXP d_covs_trajectorynSEXP, SEXP covs_riskSEXP, SEXP has_finite_trajectory_probSEXP, SEXP causeSEXP, SEXP n_causesSEXP, SEXP pair_indicesSEXP, SEXP singletons_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix const >::type covs_trajectoryn(covs_trajectorynSEXP);
    Rcpp::traits::input_parameter< NumericMatrix const >::type d_covs_trajectoryn(d_covs_trajectorynSEXP);
    Rcpp::traits::input_parameter< NumericMatrix const >::type covs_risk(covs_riskSEXP);
    Rcpp::traits::input_parameter< IntegerVector const >::type has_finite_trajectory_prob(has_finite_trajectory_probSEXP);
    Rcpp::traits::input_parameter< IntegerVector const >::type cause(causeSEXP);
    Rcpp::traits::input_parameter< size_t const >::type n_causes(n_causesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type pair_indices(pair_indicesSEXP);
    Rcpp::traits::input_parameter< IntegerVector const >::type singletons_in(singletons_inSEXP);
    rcpp_result_gen = Rcpp::wrap(mmcif_data_holder_to_R(covs_trajectoryn, d_covs_trajectoryn, covs_risk, has_finite_trajectory_prob, cause, n_causes, pair_indices, singletons_in));
    return rcpp_result_gen;
END_RCPP
}
// mmcif_logLik_to_R
double mmcif_logLik_to_R(SEXP data_ptr, NumericVector const par, Rcpp::List ghq_data, unsigned const n_threads);
RcppExport SEXP _mmcif_mmcif_logLik_to_R(SEXP data_ptrSEXP, SEXP parSEXP, SEXP ghq_dataSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type data_ptr(data_ptrSEXP);
    Rcpp::traits::input_parameter< NumericVector const >::type par(parSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ghq_data(ghq_dataSEXP);
    Rcpp::traits::input_parameter< unsigned const >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(mmcif_logLik_to_R(data_ptr, par, ghq_data, n_threads));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_mmcif_mmcif_data_holder_to_R", (DL_FUNC) &_mmcif_mmcif_data_holder_to_R, 8},
    {"_mmcif_mmcif_logLik_to_R", (DL_FUNC) &_mmcif_mmcif_logLik_to_R, 4},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_mmcif(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
